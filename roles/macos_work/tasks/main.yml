- name: Git clone/pull Homebrew repos
  ansible.builtin.git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    update: false # Let Homebrew handle updates.
  loop:
    - repo: https://github.com/hashicorp/homebrew-tap
      dest: "{{ path_brew }}/Library/Taps/hashicorp/homebrew-tap"


- name: Install Homebrew packages from list 'brew_macos_work'
  community.general.homebrew:
    name: "{{ brew_macos_work }}"
    state: latest
    force_formula: true
  when: brew_macos_work is defined

- name: Install Homebrew applications from list 'cask_macos_work'
  community.general.homebrew_cask:
    name: "{{ cask_macos_work }}"
    state: latest
    install_options: appdir=~/Applications
  when: cask_macos_work is defined

- name: Install Homebrew applications from list 'cask_macos_work_root'
  community.general.homebrew_cask:
    name: "{{ cask_macos_work_root }}"
    state: latest
    install_options: appdir=/Applications
  when: cask_macos_work_root is defined

- name: Install Go packages from list 'go_macos_work'
  ansible.builtin.shell:
    # Custom GOPATH is needed when bootstraping (pre ~/.zshenv population).
    cmd: GOPATH={{ path_golang | quote }} go install {{ item | quote }}
  loop: "{{ go_macos_work }}"
  when: go_macos_work is defined
  changed_when: false

- name: Install Pip packages from list 'pip_macos_work'
  ansible.builtin.pip:
    name: "{{ pip_macos_work }}"
    state: latest
    executable: "{{ pip_exec }}"
    extra_args: "{{ pip_args }}"
  when: pip_macos_work is defined


- name: Create misc directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0700"
  loop:
    - "{{ path_home }}/Bitbucket"


- name: Check installed Visual Studio Code extensions
  ansible.builtin.command:
    cmd: code --list-extensions
  register: code_extensions
  changed_when: false

- name: Install Visual Studio Code extensions
  ansible.builtin.command:
    cmd: code --install-extension "{{ item }}"
  loop:
    - hashicorp.terraform
    - ms-kubernetes-tools.vscode-kubernetes-tools
  when: item not in code_extensions.stdout
  changed_when: true
